---------
-- DML: 데이터 조작어
----------
-- author 테이블에 데이터 입력
-- INSERT
DESC author;

-- 묵시적 방법: 데이터 넣을 컬럼을 지정하지 않는 경우
--  정의된 순서에 따라서 값을 입력
INSERT INTO author
VALUES(1, '박경리', '토지 작가');

-- 명시적 방법
--  데이터 넣을 컬럼을 지정, 지정한 컬럼 순서대로 데이터 제공,
--  명시되지 않은 컬럼은 NULL 입력 -> NOT NULL 제약조건이 있는 필드는 오류
INSERT INTO author (author_id, author_name) -- 입력 컬럼 제공
VALUES(2, '김영하');

SELECT * FROM author;

-- CMD에서 sqlplus

-- INSERT, UPDATE, DELETE 작업을 수행하면 Transaction이 수행
-- 작업이 완료되었을 때
--  원래대로 복원: ROLLBACK
--  영구 저장: COMMIT
COMMIT;

-- BOOK 테이블 데이터 입력
SELECT * FROM book;
INSERT INTO book 
VALUES(1, '토지', sysdate, 1);

INSERT INTO book
VALUES(2, '살인자의 기억법', sysdate, 2);
SELECT * FROM book;

INSERT INTO book
VALUES(3, '홍길동전', sysdate, 3); -- author_id는 author.author_id를 FK 참조하고 있으므로
-- 제약조건 위반

-- 트랜잭션 이전으로 복구하고 싶다면
ROLLBACK;
SELECT * FROM book;

-- UPDATE table SET 컬럼명=값, 컬럼명=값;
UPDATE author SET author_desc='알쓸신잡 출연';
SELECT * FROM author;

-- UPDATE시 조건을 부여하지 않으면 모든 레코드 변경 -> 주의
ROLLBACK;
SELECT * FROM author;

UPDATE author SET author_desc='알쓸신잡 출연'
WHERE author_id='2';  -- UPDATE ~ WHERE 절을 부여하도록 하자
SELECT * FROM author;

UPDATE author SET author_desc='토지 작가'
WHERE author_id='1'; 
-- 임시 테이블 생성
-- hr.employees 테이블로부터 department_id가 10, 20, 30인 사람들만 뽑아서
-- 새 테이블 생성
CREATE TABLE emp_123 AS
    (SELECT * FROM hr.employees
        WHERE department_id IN (10, 20, 30));
DESC emp_123;

-- 연습: 부서가 30인 직원들의 급여를 10% 인상해 봅니다.
SELECT * FROM emp_123 WHERE department_id=30;
UPDATE emp_123
SET salary = salary + salary * 0.1
WHERE department_id = 30;

COMMIT;

-- DELETE FROM 테이블명 WHERE 삭제조건
SELECT * FROM emp_123;
-- job_id가 mk로 시작하는 직원을 삭제
DELETE FROM emp_123
WHERE job_id LIKE 'MK_%';
SELECT * FROM emp_123;

-- WHERE 절이 없는 DELETE는 모든 레코드를 삭제
DELETE FROM emp_123;
SELECT * FROM emp_123;

-- DELETE는 Transaction의 대상 -> ROLLBACK 가능
ROLLBACK;
SELECT * FROM emp_123;

-- TRUNCATE : 테이블 비우기
TRUNCATE TABLE emp_123;
-- 주의: TRUNCATE는 Transaction의 대상이 아니다 -> ROLLBACK 불가
ROLLBACK;
SELECT * FROM emp_123;



-- VIEW: 한개 혹은 복수 개의 테이블을 기반으로 함, 실제 데이터는 갖고 있지 않다
-- VIEW 생성을 위해서는 CREATE VIEW 권한이 필요
-- system으로 로그인
GRANT CREATE VIEW TO C##gjtjdgh;  --  C##NAMSK에게 VIEW 생성 권한을 부여


-- Simple VIEW
--  단일 테이블 혹은 뷰를 기반으로 생성
--  제약조건 위반이 없다면 INSERT, UPDATE, DELETE 가능
-- employees 테이블로부터 department_id가 10인 사람들만 VIEW로 생성
-- 기반 테이블 생성
CREATE TABLE emp_10
    AS SELECT employee_id, first_name, last_name, salary 
        FROM hr.employees;
        
SELECT * FROM emp_10;

CREATE OR REPLACE VIEW view_emp_10
    AS SELECT * FROM emp_10; -- 기반 테이블 emp_10
    
DESC view_emp_10;
--  VIEW는 테이블처럼 조회할 수 있다
--   실제 데이터는 기반 테이블에서 가지고 온다
SELECT * FROM view_emp_10;

-- SIMPLE VIEW는 제약 사항에 위배되지 않으면 내용 갱신 가능
--  view_emp_10의 급여를 두배로
UPDATE view_emp_10 SET salary = salary * 2;

-- 가급적이면 VIEW는 조회용으로만 활용하도록 하자
-- VIEW 생성시 변경 불가 객체로 만들 필요가 있다
-- READ ONLY 옵션을 부여
CREATE OR REPLACE VIEW view_emp_10
    AS SELECT * FROM emp_10 WITH READ ONLY; -- 읽기 전용 VIEW
    
UPDATE view_emp_10 SET salary = salary * 2;
-- 읽기 전용 뷰에서는 DML 작업을 수행할 수 없습니다.

-- Complex View
-- 복수 개의 Table or View를 기반으로 한다
-- 함수, 표현식을 포함할 수 있다.
-- 기본적으로는 INSERT, UPDATE, DELETE 불가
-- book 테이블 JOIN author -> VIEW
SELECT * FROM author;
SELECT * FROM book;

INSERT INTO book 
VALUES(1, '토지', sysdate, 1);

INSERT INTO book (book_id, title, author_id)
VALUES(2, '살인자의 기억법', 2);   -- pub_date는 DEFAULT 값이 입력된다

SELECT * FROM book;
commit;

CREATE OR REPLACE VIEW book_detail
    (book_id, title, author_name, pub_date)
    AS SELECT book_id, title, author_name, pub_date
        FROM book b, author a
        WHERE b.author_id = a.author_id;
        
DESC book_detail;

SELECT * FROM book_detail;

UPDATE book_detail SET author_name='미상';    -- 복합 VIEW는 수정이 불가(기본적으로)

----------
-- VIEW를 위한 딕셔너리
SELECT * FROM user_views;
-- 특정 View의 정보를 확인하려면 VIEW_NAME 조건으로 조회
SELECT * FROM user_views
WHERE view_name='BOOK_DETAIL';

SELECT * FROM user_objects
WHERE object_type='VIEW';

-- VIEW 삭제
--  실제 데이터는 VIEW가 아닌 기반테이블에 위치
DROP VIEW book_detail;
SELECT * FROM user_views;

--  VIEW 삭제해도 데이터는 유지
SELECT * FROM book;
SELECT * FROM author;



------------
--index
------------

--레코드 검색 속도 향상을 위한 색인 작업
--where 절의 조건 에서 사용 되는 필드
--join의 조건으로 사용되는 필드
--검색 기능 향상

create table s_emp
as select * from hr.emlpoyees;

--인덱스 확인
select * from user_indexes;

--s_emp 테이블 employee-id 컬럼에 unique 인덱스 생성해 봅니다
create unique index s_emp_id_pk
on s_emp(employee_id);

select * from user_indexes;

--어떤 인덱스가 어느 컬럼에 있는지 확인
select * from user_ind_colums;

select t.index_name,t.table_name,c.index_name,c.column_position
from user_indexes t, user_ind_columns c
where t.index_name = c.index_name and t.table_name = 'S_EMP';

--인덱스 삭제
drop index s_emp_id_pk;


---------------
--sequence
---------------

--만약  author 테이블 에 새 레코드 추가 해야 한다
select * from author;

--중족되지 않은 값을 추출 학 위해 sequence 사용
select max(author_id) + 1 from author;

--시퀀스 생성
create sequence seq_author_id
start with 3 --3부터 추출
increment by 1 -- 1씩증가
MAXVALUE 10000; --최댓값 10000

--시퀀스를 이용한 insert(pk)
insert into author(author_id, author_name)
values(seq_author_id.nextval, --싴퀀스 에서 중복 되지 않는 정수 생성
'스티븐 킹');

select * from author;

--새 시퀀스 생성

create SEQUENCE my_seq
start with 1 --1부터 추출
increment by 1 -- 1씩증가
MAXVALUE 100;

-- nextval,currval 가상 컬럼을 이용
select my_seq.nextval from dual;-- 새 값 추출  증가
select my_seq.currval from dual;-- 현재 시퀀스의 값 확인   증가 안함

--시퀀스 수정
alter SEQUENCE my_seq
increment by 2 --증가 값을 2로 변경
MAXVALUE 1000;

select my_seq.nextval from dual;
select my_seq.currval from dual;

--시퀀스를 위한 딕셔너리
select * from user_sequences;
select object_name from user_objects
where object_type = 'SEQUENCE';

--시퀀스 삭제
drop sequence my_seq;
select * from user_sequences;