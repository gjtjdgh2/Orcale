-------
---join
-------

desc employees;
desc departments;

--두 테이블 모두 불러 올 경우
--cross join:카티전 프로덕트
--두 테이블의 조합 가능한 모든 레코드의 쌍
select employees.employee_id,employees.department_id,
departments.department_id,departments.department_name
from employees,departments;

--일반적으로는 이런 결과를 원하지 않을것
--첫번째 테이블의 departments_ID 와 두번쨰 테이블 departments_ID 일치
select employees.employee_id,employees.first_name,employees.department_id,
departments.department_id,departments.department_name
from employees,departments
where employees.department_id = departments.department_id;

--inner join, equi join

--컬럼명의 모호성을 피하기 위해서 테이블명.컬럼명
--테이블 별명(alias)를 붙여서 관리
select employee_id,first_name,--컬럼 명이 소속이 명확하면 테이블명 적을 필요 없다
emp.department_id,
dep.department_id,
department_name
from employees emp,departments dep --별칭을 부여함
where emp.department_id = dep.department_id;

select * from employees; --107개

select first_name,emp.department_id,dep.department_id,dep.department_name
from employees emp,departments dep
where emp.department_id=dep.department_id;--106개

--join되지 않은 사원은 누구 인가?
select first_name,department_id
from employees
where department_id is null;

select first_name, department_id,
department_name
from employees emp join departments
using(department_id); --join할 컬럼을 명시

--join on
select first_name,
emp.department_id,
department_name
from employees emp join departments dep
    on(emp.department_id = dep.department_id);--on은 join문의 where 이다

--natural join
--두 테이블에 조인을 할 수  있는 공통 필드가 있을 경우(공통 필드가 명확할때)
select first_name,
department_id,
department_name
from employees natural join departments;

----------
--theta join
----------
--임의의 조건을 사용하되 join 조건이 = 조건이 아닌경우
select *from jobs where job_id ='AD_ASST';

select first_name,salary from employees emp, jobs j
where j.job_id = 'AD_ASST' and salary between j.min_salary and j.max_salary;

-----------------
--outer join
-----------------
--조건 만족하는 짱이 없는 튜플동 null을 포함 해서 출력 시키는 join
--모든 레코드를 출력할 테이블의 위치에 따라서 left ,right, full oter join
--oracle 경우 null 쪽에 (+) 붙임

--왼쪽 아웃 조인 oracle 버전
select first_name,
emp.department_id,
dep.department_id,
department_name
from employees emp,departments dep
where emp.department_id = dep.department_id(+);--왼쪽 아웃 조인

--왼쪽 아웃 조인 ansl sql
select first_name,
emp.department_id,
dep.department_id,
department_name
from employees emp left outer join departments dep --emp 테이블은 모두 참여
on emp.department_id =  dep.department_id;


--오른쪽 아웃 조인 oracle 버전
select first_name,
emp.department_id,
dep.department_id,
department_name
from employees emp,departments dep
where emp.department_id(+) = dep.department_id;


--오른쪽 아웃 조인 ansl sql
select first_name,
emp.department_id,
dep.department_id,
department_name
from employees emp right outer join departments dep --dep 테이블은 모두 참여
on emp.department_id =  dep.department_id;

--full outer join
select first_name,
emp.department_id,
dep.department_id,
department_name
from employees emp full outer join departments dep --테이블은 모두 참여
on emp.department_id =  dep.department_id;

--self join 자신의 pk와 자신의 fk를 조인
desc employees;
--자신을 주번 호칭 하므로 alias 사용 할수 밖에 없는 join
select emp.employee_id,emp.first_name,--사원 정보
emp.manager_id,
man.first_name
from employees emp,employees man
where emp.manager_id=man.employee_id;


--ansi sql
select emp.employee_id,emp.first_name,
emp.manager_id,
man.first_name
from employees emp join employees man
on emp.manager_id=man.employee_id;


------------------
--aggregation (집계)
------------------
--여러 개의 값을 집게하여 하나의 결과값을 산출

--count 갯수 셈
select count(*) from employees; -- 전체 레코드 칸 null도 포함
select count(commission_pct) from employees; --null 값은 뺀다
select count(*) from employees where commission_pct is not null;

--sum 합
select sum(salary) from employees;

--avg 평균
select avg(salary) from employees;

--사원이 받는 평균 커미션 비율
select avg(nvl(commission_pct,0)) from employees;

--null이 포함 된 집계는 null값을 포함할 것인지 아닌지를 결정하고 집계

--부서별 group을 지어준 데이터를 대상으로 집게 함수 수행
select department_id, round(avg(salary),2)
from employees
group by department_id
order by department_id;

-- 집계 함수를 사용한 select 컬럼 목록에는
--집계에 참여한 필드, 집계함수만 올수있다

select department_id,round(avg(salary),2) sal
from employees
group by department_id
order by sal desc;

--부서별 평균 급여가 2000 이상인 부서를 출력

select department_id,avg(salary)
from employees
where avg(salary) >= 2000 --이 시점은 avg(salary)가 수행되지 않은 상태
group by department_id; --error 집계전에 where 가 실행 되어서

select department_id,round(avg(salary),2)
from employees
group by department_id--그룹핑
having avg(salary) >= 7000 --having 은 group by 뒤에 쓰임
order by department_id;


--rollup
--group by 절과 같이 사용
--group by 의 결과에 좀더 상세한 요약을 제공 가능
--부서별 급여의 합계 추출 (부서 아이디,job_id)
select department_id,job_id,sum(salary)
from employees
group by department_id,job_id
order by department_id;

select department_id,job_id,sum(salary)
from employees
group by rollup(department_id,job_id)
order by department_id;

--cube 함수
--crosstable 에 대한  summar를 제공
--rollup 함수로 추출된 subotal에
--column total 값을 추출 할 수 있다
select department_id,job_id ,sum(salary)
from employees
group by cube(department_id,job_id)
order by department_id;

----------------------
---subquery
----------------------
--서브 커리는 결과가 단일 행인 경우만 사용 가능
--하나의 sql이 다른 sql 질의의 일부에 포함 되는경우
--den이 얼마나 급ㅇ를 받는지 -a
--a보다 많은 급여를 받는 사람은?
select salary from employees where first_name ='Den';
select first_name,salary from employees where salary> (
select salary from employees where first_name ='Den');


--연습 
--급여의 중앙값보다 많이 받는 직원
-- 급여 중앙값?
--급여를 중앙값보다 많이 받는 직원
select median(salary) from employees;
select first_name,salary from employees where salary>(
select median(salary) from employees);

--급여를 가장 적게 받는 사람 이름,급여 사원 번호
select min(salary) from employees;
select first_name salary,employee_id
from employees
where salary='2100';

select first_name ,salary,employee_id
from employees
where salary=(select min(salary) from employees);

--다중행 서브 커리
--서브 커리 결과 레코득 둘 이상인 경우, 단순 비교 불가능

--110번 부서의 직원이 받는 급여는? in은 or 과 같다
select first_name ,salary
from employees
where salary in (select salary from employees -- = < >등  은 못쓴다
where department_id = 110);

-- =any 은 or 과 같다
select first_name ,salary
from employees
where salary = any (select salary from employees 
where department_id = 110);

--all 은 and 와 같다
select first_name ,salary
from employees
where salary >all (select salary from employees 
where department_id = 110);

select first_name, salary from employees
where salary > any (select salary from employees 
where department_id = 110);


--correlated query
--포함한 쿼리(outer query) 포함된 커리 (inner query) 서로 연관 관계
select first_name,salary,department_id
from employees outer
where salary > (select avg(salary) from employees where 
department_id = outer.department_id);

--각 부서 별로 최고 급여 받는 사원 출력
select department_id , max(salary)
from employees
group by department_id;

select department_id,employee_id,first_name,salary
from employees
where (department_id,salary) in (select department_id , max(salary)
from employees
group by department_id);
--subquery 임시 테이블 생성
--부서별 최고 급여 테이블을 임시로 생성 해서 테이블 과 조인하는 방법
select emp.department_id ,employee_id,first_name, emp.salary
from employees emp ,(select department_id ,max(salary) salary
from employees
group by department_id) sal -- 임시 테이블
where emp.department_id= sal.department_id and emp.salary = sal.salary
order by emp.department_id;

--correlated query 활용
select emp.department_id ,employee_id,first_name, emp.salary
from employees emp
where emp.salary = (select max(salary) salary
from employees
where department_id=emp.department_id)
order by emp.department_id;


------------------
--top k query
------------------
--오라클 은 질의 수행 경과의 행ㅂㄴ호를 확인 할수 있다 가상 커럼 제공

--2007년 입사자 중에서 급여 순위가 5위까지 추출
select ROWNUM,first_name,salary
from employees;

select ROWNUM,first_name,salary
from employees
where hire_date like '07%' and rownum <=5;

select ROWNUM,first_name,salary
from employees
where hire_date like '07%' and rownum <=5
order by salary desc; -- rownum 이 정해진 이후 정렬을 함

--top k 쿼리
select ROWNUM,first_name,salary
from(select * from employees
where hire_date like '07%'
order by salary desc)
where rownum <=5;
--set 집 합
--union(합집합: 중복 제거) union all 합집합 중복 제거 안함

--intersect 교집합  minus 차집합
select first_name , salary, hire_date from employees where hire_date<'05/01/01';
select first_name , salary, hire_date from employees where salary> 12000;

select first_name , salary, hire_date from employees where hire_date<'05/01/01'
intersect
select first_name , salary, hire_date from employees where salary> 12000;

--위하고 같음
select first_name , salary, hire_date from employees where hire_date<'05/01/01'
and salary> 12000;

--union
select first_name , salary, hire_date from employees where hire_date<'05/01/01'
union
select first_name , salary, hire_date from employees where salary> 12000;
--위하고 같음
select first_name , salary, hire_date from employees where hire_date<'05/01/01'
or salary> 12000;

--차집합 minus
select first_name , salary, hire_date from employees where hire_date<'05/01/01'
minus
select first_name , salary, hire_date from employees where salary> 12000;

--입사일이 05/01/01 이전인 사람들중 급여가 12000 이하인 사람들
select first_name,salary, hire_date
from employees
where hire_date<'05/01/01' and
not(salary> 12000);

--rank 함수
select salary,first_name , rank() over (order by salary desc) as rank,--중복된 순위 건너
--뛰고 순위 부여
dense_rank() over(order by salary desc) as dense_rank,--중복순위 상관없이 다음 순위 부여
row_number() over(order by salary desc) as row_number,--중복 상관없이 차레 대로 부여
rownum --정렬 되기 이전의 레코드 순서
from employees;

--hierarchical query 트리 형태의 구조를 추출
--root 노드 시작 위치로 설정
--가지  연결 하기 위한 조건을 connect by prior 로 설정
--employees 조직도 그려 보기
select level, first_name,employee_id
from employees
start WITH manager_id is null --root 노드 조건
CONNECT by prior employee_id = manager_id
order by level;

--연습문제: 위 트리 구조에 매니저의 이름도 출력 해 주세여